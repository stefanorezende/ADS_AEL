// Esse Script desenha o Curva de Koch
//load(fix_path("C:\Users\stefa\OneDrive\Área de Trabalho\Python\AEL_scripts\ADS_layout_drawKochCurve_v0-6_LogP.ael"));


defun curve(p1, p2, layer)
{
	db_set_path_width(context, 0.5);
	//db_set_path_corner(context, DB_SQUARE_CORNER);
	db_set_path_endcap(context, DB_SQUARE_CAP_THAT_EXTENDS_HALF_WIDTH);	
	//db_set_miter_cutoff(context, 3.0);
	db_add_path(context);
	db_add_point(context, p1[0], p1[1]);
	db_add_point(context, p2[0], p2[1]);	
	
	decl dbShape = db_end(context, layer);
	

	
	//decl dbShape = db_add_rectangle(context, layer, p1[0],p1[1], 30,40);
	
	//de_delete(p3[0],(p2[1]-p3[1])/2);
}



defun kochCurve (p1, p2, degree){
	
	decl theta = PI/3;
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	decl layer = db_get_layerid(context, layerList[degree], "drawing");
	
	curve(p1, p2, layer);

	
	if(degree > 0){
		
		decl p3 = [(2*p1[0]+p2[0])/3,(2*p1[1]+p2[1])/3];
		decl p5 = [(2*p2[0]+p1[0])/3,(2*p2[1]+p1[1])/3];
 
		decl p4 = [p3[0] + (p5[0] - p3[0])*cos(theta) + (p5[1] - p3[1])*sin(theta),p3[1] - (p5[0] - p3[0])*sin(theta) + (p5[1] - p3[1])*cos(theta)];
 
		kochCurve(p1,p3,degree-1);
		kochCurve(p3,p4,degree-1);
		kochCurve(p4,p5,degree-1);
		kochCurve(p5,p2,degree-1);		
	};
}

defun clearLayers (degree){
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	
	
	while (degree > 0){
		decl layerId = db_get_layerid(context, layerList[degree]);
		db_select_all_on_layerid(context, layerId );
		db_delete_selected(context);
		degree--;
		};
}

defun definePorts (p1, p2, H){
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");
	decl x_pin = p1[0];
	decl y_pin = p1[1];
	
	
	db_create_pin(context, x_pin, y_pin, 0, cond, 1, "P1");
	db_create_pin(context, x_pin, y_pin, -90, cond2, 2, "P2");
	
	decl gnd = db_add_rectangle(context, cond2,p1[0]-8, -H-8, p2[0]+8, p2[1]+8);

}

defun runSimulation(){
	decl portDefinitions = list(list(list("P1"), list("P2"), 50.0, 0.0, PORT_CALIBRATION_NONE, 0.0));
	db_set_port_definitions(context, portDefinitions);
	
	deem_run_em_setup(de_get_current_design_context(), "emSetup");
}

defun ADS_drawKochCurve(L ,degree){

	de_select_all();
	de_delete();
	
	
	decl p1 = [-L/2, 0];
	decl p2 = [L/2, 0];

	decl H = L/3*sin(PI/3);
	
	kochCurve (p1, p2, degree);
	clearLayers(degree);
	de_select_all(); 
	de_union();
	
	//definePorts(p1,p2, H);
	//runSimulation();
}	

de_open_workspace("C:\Users\stefa\ADS_wrk\multi-freq_dipol_wrk");

decl context = de_get_design_context_from_name("multi-freq_dipol_lib:L_KockCurve:layout");
de_show_context_in_new_window(context);


ADS_drawKochCurve(42.45 ,3);


