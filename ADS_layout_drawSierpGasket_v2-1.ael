// Esse Script desenha o Fractal Sierpinski Gasket
//load(fix_path("C:\Users\stefa\ADS_wrk\AEL_scripts\ADS_layout_drawSierpGasket_v2.ael"));
//ADS_drawSierpGasket (L, W, gen, pin_point)


defun triangle(p1, p2, p3, layer)
{
	//decl cond = db_get_layerid(context, "cond", "drawing");
	
	db_add_polygon(context);
	db_add_point(context, p1[0], p1[1]);
	db_add_point(context, p2[0], p2[1]);
	db_add_point(context, p3[0], p3[1]);
	decl dbShape = db_end(context, layer);
	
	//de_delete(p3[0],(p2[1]-p3[1])/2);
}


defun jumper (p1, p2, p3, layer){

	db_add_polygon(context);
	db_add_point(context, p2[0], p2[1]);
	db_add_point(context, p2[0]+0.05, p2[1]);
	db_add_point(context, (p2[0]+0.05)/2, p2[1]-0.05); //-(0.05*cos(PI/6))
	decl dbShape = db_end(context, layer);

}

defun mid(p1, p2){ 
	return([(p1[0]+p2[0])/2-0.01, (p1[1]+p2[1])/2]-0.01);
}

defun sierpinski (p1, p2, p3, degree){
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	//decl layerList = db_get_layerid_names(context);
	decl layer = db_get_layerid(context, layerList[degree], "drawing");
		
	triangle(p1, p2, p3, layer);
	jumper (p1, p2, p3, layer);
	
	if(degree > 0){
		
		sierpinski (p1, mid(p1,p2), mid(p1,p3), degree-1);
		sierpinski (p2, mid(p1,p2), mid(p2,p3), degree-1);
		sierpinski (p3, mid(p1,p3), mid(p2,p3), degree-1);			
	};
}

defun clearLayers (degree){
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	
	
	while (degree > 0){
		decl layerId = db_get_layerid(context, layerList[degree]);
		db_select_all_on_layerid(context, layerId );
		db_delete_selected(context);
		degree--;
		};
}


defun definePorts (p1, p2, p3, degree){
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");
	decl x_pin = 0;
	decl y_pin = p2[1]/6;
	if (degree < 3)
		y_pin = p2[1]/6;
	else
		y_pin = p2[1]/(degree*4);
	
	db_create_pin(context, x_pin, y_pin, 0, cond, 1, "P1");
	db_create_pin(context, x_pin, y_pin, -90, cond2, 2, "P2");
	
	decl gnd = db_add_rectangle(context, cond2,p1[0]-8, -8, p3[0]+8, p2[1]+8);

}


defun runSimulation(){
	decl portDefinitions = list(list(list("P1"), list("P2"), 50.0, 0.0, PORT_CALIBRATION_NONE, 0.0));
	db_set_port_definitions(context, portDefinitions);
	
	deem_run_em_setup(de_get_current_design_context(), "emSetup");
}


defun ADS_drawSierpGasket(Side, degree){

	de_select_all();
	de_delete();
	
	
	decl p1 = [-Side/2, 0];
	decl p2 = [0, Side*cos(PI/6)];
	decl p3 = [Side/2, 0];
	
	//decl p1 = [0, 0];
	//decl p2 = [Side/2, Side*cos(PI/6)];
	//decl p3 = [Side, 0];
	
	sierpinski (p1, p2, p3, degree);
	clearLayers(degree);

	de_select_all(); 
	de_union();
	//db_rotate_selected_objects(context, p2[0], p2[1]/2, 180);
	
	
	//definePorts(p1, p2, p3, degree);
	
	//runSimulation();
}	

de_open_workspace("C:\Users\stefa\ADS_wrk\AEL_Python_wrk");

decl context = de_get_design_context_from_name("AEL_Python_lib:cell_2:layout");
de_show_context_in_new_window(context);


ADS_drawSierpGasket (28, 4);


