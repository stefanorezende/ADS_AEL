// Esse Script desenha as celulas de uma antena patch
// Sendo uma matriz 4x2
//load(fix_path("C:\Users\stefa\ADS_wrk\AEL_scripts\ADS_layout_drawCells_v2-6.ael"));
//ADS_drawCells (28, 28, [0, 1, 0, 1, 1, 1, 1, 0],5)

defun ADS_drawCells (L, W, gen, pin_point)
{
	de_select_all();
	de_delete();
	
	//decl gen = [0, 1, 0, 1, 1, 1, 1, 0]; //, 1, 0, 0, 1, 1, 0, 1, 0];
	decl pin = 5; //[0:15]
	//decl context = de_get_design_context_from_name("AEL_Python_lib:cell_2:layout");
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");
	
//** Desenho das Células **//	
	if (gen[0] == 1){
		decl cell0 = db_add_rectangle(context, cond, -L/2, W, -L/4, 3*W/4);
	};

	if (gen[1] == 1){
		decl cell1 = db_add_rectangle(context, cond, -L/4, W, 0, 3*W/4);
	};
	
	if (gen[2] == 1){
		decl cell2 = db_add_rectangle(context, cond, -L/2, 3*W/4, -L/4, W/2);
	};
	
	if (gen[3] == 1){
		decl cell3 = db_add_rectangle(context, cond, -L/4, 3*W/4, 0, W/2);
	};
	
	if (gen[4] == 1){
		decl cell4 = db_add_rectangle(context, cond, -L/2, W/2, -L/4, W/4);
	};
	
	if (gen[5] == 1){
		decl cell5 = db_add_rectangle(context, cond, -L/4, W/2, 0, W/4);
	};
	
	if (gen[6] == 1){
		decl cell6 = db_add_rectangle(context, cond, -L/2, W/4, -L/4, 0);
	};
	
	if (gen[7] == 1){
		decl cell7 = db_add_rectangle(context, cond, -L/4, W/4, 0, 0);
	};
	
	db_select_area(context, -L/2, W, 0, 0);
	de_copy_rotate_and_mirror(0, 0, 0, 0, 0, MIRROR_Y);
	de_select_all(); 
	de_union();
	de_deselect_all();
	
	decl gnd = db_add_rectangle(context, cond2,-L/2-8, -8, L/2+8, W+8);

//*** Construção das portas ***//
	//if (pin_point > 7 && gen[pin_point-8] == 0){
	//	exit();
	//	};
	//if (pin_point < 7 && gen[pin_point] == 0){
	//	exit();
	//	};
	decl x_pin = 0;
	decl y_pin = 0;
	
	if(pin_point == 0){
		x_pin = -3*L/8;
		y_pin = 7*W/8;
	};
	if(pin_point == 1){
		x_pin = -L/8;
		y_pin = 7*W/8;
	};
	if(pin_point == 2){
		x_pin = -3*L/8;
		y_pin = 5*W/8;
	};
	if(pin_point == 3){
		x_pin = -L/8;
		y_pin = 5*W/8;
	};
	if(pin_point == 4){
		x_pin = -3*L/8;
		y_pin = 3*W/8;
	};
	if(pin_point == 5){
		 x_pin = -L/8;
		 y_pin = 3*W/8;
	};
	if(pin_point == 6){
		 x_pin = -3*L/8;
		 y_pin = W/8;
	};
	if(pin_point == 7){
		 x_pin = -L/8;
		 y_pin = W/8;
	};
	
	if(pin_point == 9){
		 x_pin = 3*L/8;
		 y_pin = 7*W/8;
	};
	if(pin_point == 8){
		 x_pin = L/8;
		 y_pin = 7*W/8;
	};
	if(pin_point == 11){
		 x_pin = 3*L/8;
		 y_pin = 5*W/8;
	};
	if(pin_point == 10){
		 x_pin = L/8;
		 y_pin = 5*W/8;
	};
	if(pin_point == 13){
		 x_pin = 3*L/8;
		 y_pin = 3*W/8;
	};
	if(pin_point == 12){
		 x_pin = L/8;
		 y_pin = 3*W/8;
	};
	if(pin_point == 15){
		 x_pin = 3*L/8;
		 y_pin = W/8;
	};
	if(pin_point == 14){
		 x_pin = L/8;
		 y_pin = W/8;
	};
	
	db_create_pin(context, x_pin, y_pin, 0, cond, 1, "P1");
	db_create_pin(context, x_pin, y_pin, -90, cond2, 2, "P2");
	
//***Configuração e Começo da Simulação***//
//portDefinition = list(plusPinNames, minusPinNames, z0RealOhm, z0ImagOhm, calibration, refShiftMeter);
	
	decl portDefinitions = list(list(list("P1"), list("P2"), 50.0, 0.0, PORT_CALIBRATION_NONE, 0.0));
	db_set_port_definitions(context, portDefinitions);
	
	deem_run_em_setup(de_get_current_design_context(), "emSetup");
	
// Wait for the simulation to finish
// install a timer function
  api_set_timer("mySimTimer2",  // timer name
                1,              // number of milliseconds b/n calls 

                                // ***** NOTE *********
                                // This delay sometimes needs to be changed
                                // Some Sun WS needs the value 1 to make it work.
                                // Some PC's will suffer severe performance degradation
                                // if the value 1 is used. Use 1000 in that case.
 
                1,             // auto repeat
                "my_sim_check_timer_2_cb", // callback
                NULL); 
				
	//de_close_all datadisplay();
	//de_close_all();

}

defun my_sim_check_timer_2_cb (cbData, callData) 
{
   decl Msg;

   if (desim_foreground_simulation_running()) 
   {
      fputs(stderr,"simulation still running...");
   }
   else
   {
      // Simulation done!

      // make sure to remove timer function 
      api_remove_timer("mySimTimer2");

      de_release_simulator();

      // Annotate the best values back to the schematic
      //de_update_optimization_values();

      // Get variable values
      //swept_opt_record_best_values(VAR_NAMES);

      
   }
}

de_open_workspace("C:\Users\stefa\ADS_wrk\AEL_Python_wrk");

decl context;
context = de_get_design_context_from_name("AEL_Python_lib:cell_2:layout");
de_show_context_in_new_window(context);

ADS_drawCells (28, 28, [0,0,1,1,1,1,0,0], 12);
